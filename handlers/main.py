import random
import datetime
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup 
from config import dp, bot, CHANNEL_ID
from database.database import check_user, check_code_exists, code_post, regular_user_post, \
check_user_roles, delete_regular_user, get_branches, get_regular_info
from .state_bot import Registration, AddPhone
from .keyboards import get_keyboard
from .messages import subs_channel
from .text import *


class BotMain:
    def __init__(self):
        dp.register_message_handler(self.start,commands=['start'])
        dp.register_message_handler(self.random_code,text = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥')
        dp.register_message_handler(self.support,text = '–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        dp.register_message_handler(self.phone_command,text = '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
        dp.register_message_handler(self.points,text = '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–ª—ã')
        dp.register_message_handler(self.regular_user,text = '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        dp.register_message_handler(self.rules,text = '–ü—Ä–∞–≤–∏–ª–∞')
        dp.register_message_handler(self.continue_roles,text = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        dp.register_message_handler(self.delete_roles,text = '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞')
        dp.register_message_handler(self.back,state='*',text = '–ù–∞–∑–∞–¥')
        dp.register_message_handler(self.fillial,text = '–§–∏–ª–ª–∏–∞–ª—ã')
        dp.register_callback_query_handler(self.callback, lambda c: c.data in ['check_sub'])


    async def start(self, message: Message):
        user_id = message.from_user.id
        look_user_get = await check_user(user_id)
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        if look_user_get:
            await message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∫–∏–¥–æ–∫.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_keyboard('menu'))
        else:
            registration = Registration(message)
            await registration.registration_user(message)

    
    async def random_code(self, message: Message):
        user_id = message.from_user.id
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        check_role = await check_user_roles(user_id)
        if check_role:
            return await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. \n–ß—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"', reply_markup=get_keyboard('menu'))
        while True:
            code = random.randint(10000, 99999)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 5-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if await check_code_exists(code):
                await message.answer(f"–ö–æ–¥: {code}\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü—É!")
                data = {
                    "user_id": message.from_user.id,
                    "code": code
                }
                check_code = await code_post(data)
                if check_code:
                    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                    break



    async def support(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        
        url = InlineKeyboardMarkup()
        url.add(InlineKeyboardButton(text='–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üìû', url='https://t.me/Bams_06'))
        await message.answer(support(),reply_markup=url)

    
    async def phone_command(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        add_phone = AddPhone(message)
        await add_phone.add_list_phone(message)
    

    async def callback(self, callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        look_user_get = await check_user(user_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(callback_query, bot, CHANNEL_ID)
        if not check_cub:
            return await callback_query.message.reply(not_sub(), reply_markup=kb)
        if look_user_get:
            await callback_query.message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∫–∏–¥–æ–∫.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',\
                                                reply_markup=get_keyboard('menu'))
        else:
            registration = Registration(callback_query.message)
            await registration.registration_user(callback_query.message)


    async def points(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        user_id = message.from_user.id
        look_user_get = await check_user(user_id)
        points_user = look_user_get[0]['points']
        if points_user:
            await message.answer(f'–£ –≤–∞—Å –±–∞–ª–ª–æ–≤: {points_user}')
        else:
            await message.answer('–£ –≤–∞—Å –±–∞–ª–ª–æ–≤: 0')


    
    async def regular_user(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)

        user_id = message.from_user.id
        check_role = await check_user_roles(user_id)
        if check_role:
            info_regular = await get_regular_info(user_id)
            response = "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.\n–ß—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞'\n\n"
            for info in info_regular:
                response += f"<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏::</b> {info['summ']}\n"
                response += f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:</b> {info['discount']} %\n"
                response += f"<b>–ü–æ—Å–µ—â–µ–Ω–∏–π:</b> {info['visits']}"
            await message.answer(response,reply_markup=get_keyboard('delete_roles'), parse_mode='HTML')
        else:
            await message.answer('–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?\
                            \n–û–¥–Ω–∞–∫–æ, –¥–ª—è —ç—Ç–æ–≥–æ —É —Ç–µ–±—è –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞.\
                            \n–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º?', reply_markup=get_keyboard('continue'))




    async def continue_roles(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        user_id = message.from_user.id
        post_regular_user = await regular_user_post(user_id)
        if post_regular_user:
            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.', reply_markup=get_keyboard('menu'))
        else:
            await message.answer('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.', reply_markup=get_keyboard('menu'))


    async def rules(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        text = rules_text()
        await message.answer(text)

    
    async def back(self, message: Message, state: FSMContext):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        current_state = await state.get_state()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if current_state is not None:
            await state.finish()
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_keyboard('menu'))
        else:
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_keyboard('menu'))     
    

    async def delete_roles(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        user_id = message.from_user.id
        check_role = await check_user_roles(user_id)
        if not check_role:
            return await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º', reply_markup=get_keyboard('menu'))
        delete_user = await delete_regular_user(user_id)
        if delete_user:
            await message.answer('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',\
                                 reply_markup=get_keyboard('menu'))
        else:
            await self.back(message)

    
    async def fillial(self, message: Message):
        kb = get_keyboard('subs_kb')
        check_cub = await subs_channel(message, bot, CHANNEL_ID)
        if not check_cub:
            return await message.reply(not_sub(), reply_markup=kb)
        branches = await get_branches()
        if branches:
            response = "<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤:</b>\n\n"
            for branch in branches:
                response += f"<b>–§–∏–ª–∏–∞–ª:</b> {branch['name']}\n"
                response += f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {branch['location']}\n"
                
                opening_time = datetime.datetime.strptime(branch['opening_time'], "%H:%M:%S").strftime("%H:%M")
                closing_time = datetime.datetime.strptime(branch['closing_time'], "%H:%M:%S").strftime("%H:%M")
                
                response += f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {opening_time} - {closing_time}\n\n"
            await message.answer(response, parse_mode='HTML')
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª–∏–∞–ª—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",\
                                parse_mode='HTML')