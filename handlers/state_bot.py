import re
from datetime import datetime
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from config import dp, bot
from aiogram.types import Message, Contact
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from .keyboards import get_keyboard
from database.database import user_post, check_user, patch_phone
from .text import rules_text




class Registration:
    def __init__(self,message: Message):
        self.message = message
        
    async def registration_user(self, message:Message):
        class RegistrationState(StatesGroup):
            first_name = State()
            last_name = State()
            age = State()
            phone = State()

        await RegistrationState.first_name.set()
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.', reply_markup=ReplyKeyboardRemove())

        @dp.message_handler(state=RegistrationState.first_name)
        async def first_name_state(message: Message, state: FSMContext):
            async with state.proxy() as data:
                data['first_name'] = message.text
                await state.update_data(first_name=message.text)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ first_name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.')
                await RegistrationState.next()


        @dp.message_handler(state=RegistrationState.last_name)
        async def last_name_state(message: Message, state: FSMContext):
            async with state.proxy() as data:
                data['last_name'] = message.text
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001).')
            await RegistrationState.next()

        @dp.message_handler(state=RegistrationState.age)
        async def age_state(message: Message, state: FSMContext):
            async with state.proxy() as data:
                try:
                    birthdate = datetime.strptime(message.text, "%d.%m.%Y")
                    today = datetime.today()
                    age = today.year - birthdate.year
                    if today.month < birthdate.month or (today.month == birthdate.month and today.day < birthdate.day):
                        age -= 1
                    data['age'] = age
                    data['date'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
                except ValueError:
                    return await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001).')

            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±", request_contact=True))
            await message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard)
            await RegistrationState.next()

        @dp.message_handler(content_types=types.ContentType.CONTACT, state=RegistrationState.phone)
        async def phone_state(message: Message, state: FSMContext):
            async with state.proxy() as data:
                data['phone'] = message.contact.phone_number
                await state.update_data(phone=message.contact.phone_number)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ phone –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                first_name = data['first_name']
                last_name = data['last_name']
                age = data['age']
                phone = data['phone']

                formatted_text = f"*–ò–º—è:* {first_name}\n*–§–∞–º–∏–ª–∏—è:* {last_name}\n*–í–æ–∑—Ä–∞—Å—Ç:* {age}\n*–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}"

                await message.answer(formatted_text, parse_mode=types.ParseMode.MARKDOWN)

                await message.answer("–í—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã? –î–∞ / –ù–µ—Ç", reply_markup=get_keyboard('yes/no'))

        @dp.message_handler(lambda message: message.text.lower() == '–¥–∞', state=RegistrationState)
        async def confirmation_yes(message: types.Message, state: FSMContext):
            user_data = await state.get_data()
            nick = message.from_user.first_name
            user_id = message.from_user.id
            first_name = user_data.get('first_name')
            last_name = user_data.get('last_name')
            age = user_data.get('age')
            date = user_data.get('date')
            phone = user_data.get('phone')
            data = {
                "nickname": nick,
                "user_id": user_id,
                "first_name": first_name,
                "last_name": last_name,
                "phone_number": phone,
                "age": age,
                "date": date,
            }
            post = await user_post(data)
            if post:
                text = rules_text()
                await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n{text}", \
                                     reply_markup=(get_keyboard('menu')))
            await state.finish()


        @dp.message_handler(lambda message: message.text.lower() == '–Ω–µ—Ç', state=RegistrationState)
        async def confirmation_no(message: types.Message, state: FSMContext):
            await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
            await RegistrationState.first_name.set()
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')






class AddPhone:
    def __init__(self, message: Message):
        self.message = message
        
    async def add_list_phone(self, message: Message):
        class AddPhoneState(StatesGroup):
            phone = State()

        await AddPhoneState.phone.set()
        user_id = message.from_user.id
        look_user_get = await check_user(user_id)

        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX\n'
                     '–ü—Ä–∏–º–µ—Ä: +79991234567', reply_markup=ReplyKeyboardRemove())

        @dp.message_handler(state=AddPhoneState.phone)
        async def phone_state(message: Message, state: FSMContext):
            async with state.proxy() as data:
                data['phone'] = message.text
                if look_user_get[0]['phone_number'] and look_user_get[0]['phone_number2']:
                    await message.answer('–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–≤–∞ –Ω–æ–º–µ—Ä–∞', reply_markup=get_keyboard('menu'))
                    await state.finish()
                    return

                phone = data['phone']
                user_id = message.from_user.id
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                phone_pattern = r'^\+7\d{10}$'  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                if not re.match(phone_pattern, phone):
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX\n'
                     '–ü—Ä–∏–º–µ—Ä: +79991234567', reply_markup=get_keyboard('main_menu'))

                    return

                patch_user_phone = await patch_phone(user_id, phone)
                if patch_user_phone:
                    await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!', reply_markup=get_keyboard('menu'))
                else:
                    await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=get_keyboard('menu'))
                await state.finish()
